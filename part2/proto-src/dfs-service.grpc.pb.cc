// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs-service.proto

#include "dfs-service.pb.h"
#include "dfs-service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dfs_service {

static const char* DFSService_method_names[] = {
  "/dfs_service.DFSService/Store",
  "/dfs_service.DFSService/Fetch",
  "/dfs_service.DFSService/List",
  "/dfs_service.DFSService/Stat",
  "/dfs_service.DFSService/GetMutex",
  "/dfs_service.DFSService/CallbackList",
  "/dfs_service.DFSService/Delete",
};

std::unique_ptr< DFSService::Stub> DFSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DFSService::Stub> stub(new DFSService::Stub(channel));
  return stub;
}

DFSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Store_(DFSService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Fetch_(DFSService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_List_(DFSService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stat_(DFSService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMutex_(DFSService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallbackList_(DFSService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(DFSService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::dfs_service::FileChunk>* DFSService::Stub::StoreRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::dfs_service::FileChunk>::Create(channel_.get(), rpcmethod_Store_, context, response);
}

void DFSService::Stub::experimental_async::Store(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::experimental::ClientWriteReactor< ::dfs_service::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::dfs_service::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Store_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::dfs_service::FileChunk>* DFSService::Stub::AsyncStoreRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dfs_service::FileChunk>::Create(channel_.get(), cq, rpcmethod_Store_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::dfs_service::FileChunk>* DFSService::Stub::PrepareAsyncStoreRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dfs_service::FileChunk>::Create(channel_.get(), cq, rpcmethod_Store_, context, response, false, nullptr);
}

::grpc::ClientReader< ::dfs_service::FileChunk>* DFSService::Stub::FetchRaw(::grpc::ClientContext* context, const ::dfs_service::File& request) {
  return ::grpc::internal::ClientReaderFactory< ::dfs_service::FileChunk>::Create(channel_.get(), rpcmethod_Fetch_, context, request);
}

void DFSService::Stub::experimental_async::Fetch(::grpc::ClientContext* context, ::dfs_service::File* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dfs_service::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Fetch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dfs_service::FileChunk>* DFSService::Stub::AsyncFetchRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dfs_service::FileChunk>::Create(channel_.get(), cq, rpcmethod_Fetch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dfs_service::FileChunk>* DFSService::Stub::PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dfs_service::FileChunk>::Create(channel_.get(), cq, rpcmethod_Fetch_, context, request, false, nullptr);
}

::grpc::Status DFSService::Stub::List(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::dfs_service::FileList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void DFSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::dfs_service::Empty* request, ::dfs_service::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::dfs_service::Empty* request, ::dfs_service::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void DFSService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileList>* DFSService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileList>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileList>* DFSService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileList>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status DFSService::Stub::Stat(::grpc::ClientContext* context, const ::dfs_service::File& request, ::dfs_service::FileStat* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stat_, context, request, response);
}

void DFSService::Stub::experimental_async::Stat(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::FileStat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::Stat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileStat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::Stat(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::FileStat* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, reactor);
}

void DFSService::Stub::experimental_async::Stat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileStat* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>* DFSService::Stub::AsyncStatRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileStat>::Create(channel_.get(), cq, rpcmethod_Stat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileStat>* DFSService::Stub::PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileStat>::Create(channel_.get(), cq, rpcmethod_Stat_, context, request, false);
}

::grpc::Status DFSService::Stub::GetMutex(::grpc::ClientContext* context, const ::dfs_service::File& request, ::dfs_service::FileMutex* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMutex_, context, request, response);
}

void DFSService::Stub::experimental_async::GetMutex(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::FileMutex* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMutex_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::GetMutex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileMutex* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMutex_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::GetMutex(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::FileMutex* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMutex_, context, request, response, reactor);
}

void DFSService::Stub::experimental_async::GetMutex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileMutex* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMutex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileMutex>* DFSService::Stub::AsyncGetMutexRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileMutex>::Create(channel_.get(), cq, rpcmethod_GetMutex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileMutex>* DFSService::Stub::PrepareAsyncGetMutexRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileMutex>::Create(channel_.get(), cq, rpcmethod_GetMutex_, context, request, false);
}

::grpc::Status DFSService::Stub::CallbackList(::grpc::ClientContext* context, const ::dfs_service::File& request, ::dfs_service::FileList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CallbackList_, context, request, response);
}

void DFSService::Stub::experimental_async::CallbackList(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallbackList_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::CallbackList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CallbackList_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::CallbackList(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CallbackList_, context, request, response, reactor);
}

void DFSService::Stub::experimental_async::CallbackList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CallbackList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileList>* DFSService::Stub::AsyncCallbackListRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileList>::Create(channel_.get(), cq, rpcmethod_CallbackList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::FileList>* DFSService::Stub::PrepareAsyncCallbackListRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::FileList>::Create(channel_.get(), cq, rpcmethod_CallbackList_, context, request, false);
}

::grpc::Status DFSService::Stub::Delete(::grpc::ClientContext* context, const ::dfs_service::File& request, ::dfs_service::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void DFSService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::dfs_service::File* request, ::dfs_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void DFSService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::Empty>* DFSService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::Empty>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::Empty>* DFSService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::dfs_service::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::Empty>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

DFSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DFSService::Service, ::dfs_service::FileChunk, ::dfs_service::Empty>(
          std::mem_fn(&DFSService::Service::Store), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DFSService::Service, ::dfs_service::File, ::dfs_service::FileChunk>(
          std::mem_fn(&DFSService::Service::Fetch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFSService::Service, ::dfs_service::Empty, ::dfs_service::FileList>(
          std::mem_fn(&DFSService::Service::List), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFSService::Service, ::dfs_service::File, ::dfs_service::FileStat>(
          std::mem_fn(&DFSService::Service::Stat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFSService::Service, ::dfs_service::File, ::dfs_service::FileMutex>(
          std::mem_fn(&DFSService::Service::GetMutex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFSService::Service, ::dfs_service::File, ::dfs_service::FileList>(
          std::mem_fn(&DFSService::Service::CallbackList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFSService::Service, ::dfs_service::File, ::dfs_service::Empty>(
          std::mem_fn(&DFSService::Service::Delete), this)));
}

DFSService::Service::~Service() {
}

::grpc::Status DFSService::Service::Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::FileChunk>* reader, ::dfs_service::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::Fetch(::grpc::ServerContext* context, const ::dfs_service::File* request, ::grpc::ServerWriter< ::dfs_service::FileChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::List(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::dfs_service::FileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::Stat(::grpc::ServerContext* context, const ::dfs_service::File* request, ::dfs_service::FileStat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::GetMutex(::grpc::ServerContext* context, const ::dfs_service::File* request, ::dfs_service::FileMutex* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::CallbackList(::grpc::ServerContext* context, const ::dfs_service::File* request, ::dfs_service::FileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::Delete(::grpc::ServerContext* context, const ::dfs_service::File* request, ::dfs_service::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dfs_service

