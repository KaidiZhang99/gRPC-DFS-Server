// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dfs-service.proto

#ifndef PROTOBUF_INCLUDED_dfs_2dservice_2eproto
#define PROTOBUF_INCLUDED_dfs_2dservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dfs_2dservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dfs_2dservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dfs_2dservice_2eproto();
namespace dfs_service {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileChunk;
class FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class FileMutex;
class FileMutexDefaultTypeInternal;
extern FileMutexDefaultTypeInternal _FileMutex_default_instance_;
class FileStat;
class FileStatDefaultTypeInternal;
extern FileStatDefaultTypeInternal _FileStat_default_instance_;
}  // namespace dfs_service
namespace google {
namespace protobuf {
template<> ::dfs_service::Empty* Arena::CreateMaybeMessage<::dfs_service::Empty>(Arena*);
template<> ::dfs_service::File* Arena::CreateMaybeMessage<::dfs_service::File>(Arena*);
template<> ::dfs_service::FileChunk* Arena::CreateMaybeMessage<::dfs_service::FileChunk>(Arena*);
template<> ::dfs_service::FileList* Arena::CreateMaybeMessage<::dfs_service::FileList>(Arena*);
template<> ::dfs_service::FileMutex* Arena::CreateMaybeMessage<::dfs_service::FileMutex>(Arena*);
template<> ::dfs_service::FileStat* Arena::CreateMaybeMessage<::dfs_service::FileStat>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dfs_service {

// ===================================================================

class FileChunk final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileChunk) */ {
 public:
  FileChunk();
  virtual ~FileChunk();

  FileChunk(const FileChunk& from);

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileChunk* other);
  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileChunk* New() const final {
    return CreateMaybeMessage<FileChunk>(nullptr);
  }

  FileChunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileChunk& from);
  void MergeFrom(const FileChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes buffer = 2;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_buffer(::std::string&& value);
  #endif
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // @@protoc_insertion_point(class_scope:dfs_service.FileChunk)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dfs_service.Empty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class FileMutex final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileMutex) */ {
 public:
  FileMutex();
  virtual ~FileMutex();

  FileMutex(const FileMutex& from);

  inline FileMutex& operator=(const FileMutex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileMutex(FileMutex&& from) noexcept
    : FileMutex() {
    *this = ::std::move(from);
  }

  inline FileMutex& operator=(FileMutex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileMutex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMutex* internal_default_instance() {
    return reinterpret_cast<const FileMutex*>(
               &_FileMutex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileMutex* other);
  friend void swap(FileMutex& a, FileMutex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileMutex* New() const final {
    return CreateMaybeMessage<FileMutex>(nullptr);
  }

  FileMutex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileMutex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileMutex& from);
  void MergeFrom(const FileMutex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMutex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dfs_service.FileMutex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dfs_service.File)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class FileStat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileStat) */ {
 public:
  FileStat();
  virtual ~FileStat();

  FileStat(const FileStat& from);

  inline FileStat& operator=(const FileStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileStat(FileStat&& from) noexcept
    : FileStat() {
    *this = ::std::move(from);
  }

  inline FileStat& operator=(FileStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileStat* internal_default_instance() {
    return reinterpret_cast<const FileStat*>(
               &_FileStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FileStat* other);
  friend void swap(FileStat& a, FileStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileStat* New() const final {
    return CreateMaybeMessage<FileStat>(nullptr);
  }

  FileStat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileStat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileStat& from);
  void MergeFrom(const FileStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp mtime = 2;
  bool has_mtime() const;
  void clear_mtime();
  static const int kMtimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& mtime() const;
  ::google::protobuf::Timestamp* release_mtime();
  ::google::protobuf::Timestamp* mutable_mtime();
  void set_allocated_mtime(::google::protobuf::Timestamp* mtime);

  // .google.protobuf.Timestamp ctime = 3;
  bool has_ctime() const;
  void clear_ctime();
  static const int kCtimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& ctime() const;
  ::google::protobuf::Timestamp* release_ctime();
  ::google::protobuf::Timestamp* mutable_ctime();
  void set_allocated_ctime(::google::protobuf::Timestamp* ctime);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dfs_service.FileStat)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* mtime_;
  ::google::protobuf::Timestamp* ctime_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class FileList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileList) */ {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FileList* other);
  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(nullptr);
  }

  FileList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dfs_service.FileStat file = 1;
  int file_size() const;
  void clear_file();
  static const int kFileFieldNumber = 1;
  ::dfs_service::FileStat* mutable_file(int index);
  ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >*
      mutable_file();
  const ::dfs_service::FileStat& file(int index) const;
  ::dfs_service::FileStat* add_file();
  const ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >&
      file() const;

  // @@protoc_insertion_point(class_scope:dfs_service.FileList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat > file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileChunk

// string name = 1;
inline void FileChunk::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileChunk::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileChunk.name)
  return name_.GetNoArena();
}
inline void FileChunk::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileChunk.name)
}
#if LANG_CXX11
inline void FileChunk::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileChunk.name)
}
#endif
inline void FileChunk::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileChunk.name)
}
inline void FileChunk::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileChunk.name)
}
inline ::std::string* FileChunk::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileChunk.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileChunk::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.FileChunk.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileChunk.name)
}

// bytes buffer = 2;
inline void FileChunk::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileChunk::buffer() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileChunk.buffer)
  return buffer_.GetNoArena();
}
inline void FileChunk::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileChunk.buffer)
}
#if LANG_CXX11
inline void FileChunk::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileChunk.buffer)
}
#endif
inline void FileChunk::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileChunk.buffer)
}
inline void FileChunk::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileChunk.buffer)
}
inline ::std::string* FileChunk::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileChunk.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileChunk::release_buffer() {
  // @@protoc_insertion_point(field_release:dfs_service.FileChunk.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_buffer(::std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileChunk.buffer)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// FileMutex

// -------------------------------------------------------------------

// File

// string name = 1;
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.name)
  return name_.GetNoArena();
}
inline void File::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.File.name)
}
#if LANG_CXX11
inline void File::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.File.name)
}
#endif
inline void File::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.File.name)
}
inline void File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.File.name)
}
inline ::std::string* File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.File.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.File.name)
}

// -------------------------------------------------------------------

// FileStat

// string name = 1;
inline void FileStat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileStat::name() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.name)
  return name_.GetNoArena();
}
inline void FileStat::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.name)
}
#if LANG_CXX11
inline void FileStat::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.FileStat.name)
}
#endif
inline void FileStat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.FileStat.name)
}
inline void FileStat::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.FileStat.name)
}
inline ::std::string* FileStat::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.FileStat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileStat::release_name() {
  // @@protoc_insertion_point(field_release:dfs_service.FileStat.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileStat::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileStat.name)
}

// uint64 size = 4;
inline void FileStat::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FileStat::size() const {
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.size)
  return size_;
}
inline void FileStat::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.FileStat.size)
}

// .google.protobuf.Timestamp mtime = 2;
inline bool FileStat::has_mtime() const {
  return this != internal_default_instance() && mtime_ != nullptr;
}
inline const ::google::protobuf::Timestamp& FileStat::mtime() const {
  const ::google::protobuf::Timestamp* p = mtime_;
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.mtime)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* FileStat::release_mtime() {
  // @@protoc_insertion_point(field_release:dfs_service.FileStat.mtime)
  
  ::google::protobuf::Timestamp* temp = mtime_;
  mtime_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* FileStat::mutable_mtime() {
  
  if (mtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    mtime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dfs_service.FileStat.mtime)
  return mtime_;
}
inline void FileStat::set_allocated_mtime(::google::protobuf::Timestamp* mtime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mtime_);
  }
  if (mtime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(mtime)->GetArena();
    if (message_arena != submessage_arena) {
      mtime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mtime, submessage_arena);
    }
    
  } else {
    
  }
  mtime_ = mtime;
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileStat.mtime)
}

// .google.protobuf.Timestamp ctime = 3;
inline bool FileStat::has_ctime() const {
  return this != internal_default_instance() && ctime_ != nullptr;
}
inline const ::google::protobuf::Timestamp& FileStat::ctime() const {
  const ::google::protobuf::Timestamp* p = ctime_;
  // @@protoc_insertion_point(field_get:dfs_service.FileStat.ctime)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* FileStat::release_ctime() {
  // @@protoc_insertion_point(field_release:dfs_service.FileStat.ctime)
  
  ::google::protobuf::Timestamp* temp = ctime_;
  ctime_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* FileStat::mutable_ctime() {
  
  if (ctime_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    ctime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dfs_service.FileStat.ctime)
  return ctime_;
}
inline void FileStat::set_allocated_ctime(::google::protobuf::Timestamp* ctime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ctime_);
  }
  if (ctime) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ctime)->GetArena();
    if (message_arena != submessage_arena) {
      ctime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctime, submessage_arena);
    }
    
  } else {
    
  }
  ctime_ = ctime;
  // @@protoc_insertion_point(field_set_allocated:dfs_service.FileStat.ctime)
}

// -------------------------------------------------------------------

// FileList

// repeated .dfs_service.FileStat file = 1;
inline int FileList::file_size() const {
  return file_.size();
}
inline void FileList::clear_file() {
  file_.Clear();
}
inline ::dfs_service::FileStat* FileList::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:dfs_service.FileList.file)
  return file_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >*
FileList::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:dfs_service.FileList.file)
  return &file_;
}
inline const ::dfs_service::FileStat& FileList::file(int index) const {
  // @@protoc_insertion_point(field_get:dfs_service.FileList.file)
  return file_.Get(index);
}
inline ::dfs_service::FileStat* FileList::add_file() {
  // @@protoc_insertion_point(field_add:dfs_service.FileList.file)
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dfs_service::FileStat >&
FileList::file() const {
  // @@protoc_insertion_point(field_list:dfs_service.FileList.file)
  return file_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dfs_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dfs_2dservice_2eproto
